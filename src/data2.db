#!/bin/bash
#-------------------------------------------------------------------------------------#
# Fedora Post-Installation Utility Script                                             #
# This script facilitates the installation and configuration of various drivers,      #
# codecs, and applications on a Fedora system. It includes functions to install       #
# AMD and Intel drivers, media codecs, Flatpak, and Google Chrome.                    #
#                                                                                     #
# Functions:                                                                          #
#   - install_amd_drivers: Installs AMD Mesa Freeworld Drivers.                       #
#   - install_intel_drivers: Installs Intel Media Drivers.                            #
#   - install_drivers: Provides a menu to install video drivers based on user choice. #
#   - install_media_codecs: Installs essential media codecs for multimedia playback.  #
#   - enable_flathub: Adds the Flathub repository and installs Flatpak.               #
#   - install_google_chrome: Installs Google Chrome browser.                          #
#                                                                                     #
# Usage:                                                                              #
#   Run the script with root privileges to ensure it can perform system-level         #
#   modifications. For example, use 'sudo ./main.sh'.                                 #
#                                                                                     #
# Prerequisites:                                                                      #
#   - The script assumes a Fedora system with DNF installed.                          #
#   - Internet connection is required for downloading packages and updates.           #
#-------------------------------------------------------------------------------------#

# Installs Mesa Freeworld Drivers 
install_amd_drivers(){
    clear
    dnf swap -y mesa-va-drivers mesa-va-drivers-freeworld
    dnf swap -y mesa-vdpau-drivers mesa-vdpau-drivers-freeworld
    dnf install -y libva-utils
}

# Installs Intel Media Driver
install_intel_drivers(){
    clear
    dnf install -y intel-media-driver
    dnf install -y  libva-utils
}

# Main Function to Install Video Drivers
install_drivers() {
    # Check if rpmfusion-free and rpmfusion-nonfree repositories are enabled
    free_repo=$(dnf repolist all | grep -i 'rpmfusion-free')
    nonfree_repo=$(dnf repolist all | grep -i 'rpmfusion-nonfree')
    
    if [[ -n "$free_repo" && -n "$nonfree_repo" ]]; then
     while true; do
        CHOICE=$(dialog --clear \
                --title "Video Drivers" \
                --nocancel \
                --menu "Choose an option:" \
                15 60 3 \
                1 "Install Mesa FreeWorld Drivers for AMD" \
                2 "Install Intel Media Driver" \
                3 "Exit" \
                3>&1 1>&2 2>&3)


        case $CHOICE in
            1) install_amd_drivers ;;
            2) install_intel_drivers ;;
            3) break ;;
            *) echo "Invalid option. Please try again." ;;
        esac
    done
    else
        dialog --msgbox "Please Enable RPM Fusion First" 0 0
        break
    fi
}

# Install Media Codecs 
install_media_codecs() {
    echo "Install Media Codecs"
    
    free_repo=$(dnf repolist all | grep -i 'rpmfusion-free')
    nonfree_repo=$(dnf repolist all | grep -i 'rpmfusion-nonfree')

    if [[ -n "$free_repo" && -n "$nonfree_repo" ]]; then
        dnf update -y
        dnf install -y gstreamer1-plugins-{bad-\*,good-\*,base} gstreamer1-plugin-openh264 gstreamer1-libav --exclude=gstreamer1-plugins-bad-free-devel
        dnf install -y lame* --exclude=lame-devel
        dnf group upgrade -y --with-optional Multimedia
    else
        dialog --msgbox "Please Enable RPM Fusion First" 0 0
        break
    fi
}

# Installs Flatpak and Enables Flathub
enable_flathub() {
    # Check if flatpak is installed
    if ! command -v flatpak &> /dev/null; then
        echo "Flatpak is not installed. Installing flatpak..."
        
        # Install flatpak using dnf
        sudo dnf install -y flatpak
        if [[ $? -ne 0 ]]; then
            echo "Failed to install flatpak. Please check your package manager."
            return 1
        fi
    fi

    # Add the Flathub repository
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    if [[ $? -eq 0 ]]; then
        dialog --msgbox "Flathub Enabled" 0 0
    else
        dialog --msgbox "Failed to add Flathub repository." 0 0
        return 1
    fi
}

# Installs Google Chrome repo and Installs Google Chrome
install_google_chrome() {
    dnf install -y fedora-workstation-repositories
    dnf config-manager --set-enabled google-chrome
    dnf -y install google-chrome-stable
    dialog --msgbox "Google Chrome Installed" 0 0
}



flatpak_menu() {
    # Loop indefinitely to show the menu until the user chooses to exit
    while true; do
        # Display a menu using dialog and store the user's choice in the variable CHOICE
        CHOICE=$(dialog --clear \
                --title "Configure Flatpak and Manage Applications" \
                --nocancel \
                --menu "Choose an option:" \
                15 60 3 \
                1 "Enable Flatpak Support" \
                2 "Install Applications via Flatpak" \
                3 "Return to Main Menu" \
                3>&1 1>&2 2>&3)

        # Clear the screen after the dialog closes
        clear
        # Handle the user's choice
        case $CHOICE in
            1) 
                # Option 1: Enable Flatpak through the enable_flathub function
                enable_flathub ;;
            2) 
                # Option 2: Install Flatpak apps through the install_flatpaks function
                install_flatpaks ;;
            3) 
                # Option 3: Exit the menu loop
                break ;;
            *) 
                # Handle any other input as an invalid option
                echo "Invalid option. Please try again." ;;
        esac
    done
}


# Function to install Flatpak apps listed in flatapps.txt
install_flatpaks() {
    clear
    local USER=$(logname)
    local file="./src/flatapps.txt"

    if [[ ! -f "$file" ]]; then
        echo "File $file not found!"
        sleep 2
        return 1
    fi

    dialog --title "Edit Flatpak Apps List" --yesno "Would you like to add or remove apps from the flatapps.txt file?" 7 60
    local edit_choice=$?

    if [[ $edit_choice -eq 0 ]]; then
        runuser -u $USER nano "$file"
        clear
    fi

    clear

    # Read the file into an array of options for the radiolist
    local options=()
    local i=0
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            options+=($i "$line" off)
            ((i++))
        fi
    done < "$file"

    if [[ ${#options[@]} -eq 0 ]]; then
        dialog --msgbox "No apps found in $file" 0 0
        sleep 1
        return 1
    fi

    # Use dialog to create a radiolist for the user to select apps
    local choices=$(dialog --title "Select Flatpak Apps to Install" --checklist "Select apps:" 15 60 5 "${options[@]}" 3>&1 1>&2 2>&3 3>&-)

    if [[ -z "$choices" ]]; then
        dialog --msgbox "No apps selected." 0 0
        return 1
    fi

    clear
    echo "Installing selected Flatpak Apps"

    # Convert the user's choices into an array of indices
    local selected_indices=($choices)

    # Install the selected apps
    for index in "${selected_indices[@]}"; do
        local app="${options[index*3+1]}"  # Get the app name from options array
        runuser -u "$USER" -- flatpak install -y flathub "$app"
    done

    return 0
}



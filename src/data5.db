#!/bin/bash
#----------------------------------------------------------------------------------#
#               This script holds Functions for main Script file                   #
#               *. setup_wifi_nfs_shares                                           #
#               *. update_nfs_script                                               #
#               *. wifi_nfs_shares                                                 #
#               *. nfs_shares_via_fstab                                            #
#               *. install_nerd_fonts                                              #
#               *. nfs_setu                                                        #
#----------------------------------------------------------------------------------#

#Scans for Wifi Networks
setup_wifi_nfs_shares() {
    # Function to scan for available Wi-Fi networks and select one
    scan_and_select_wifi() {
        echo "Scanning for available Wi-Fi networks..."
        AVAILABLE_SSIDS=$(nmcli -t -f SSID dev wifi | sort -u)

        if [ -z "$AVAILABLE_SSIDS" ]; then
            echo "No Wi-Fi networks found. Exiting..."
            sleep 5
            exit 1
        fi

        echo "Available Wi-Fi networks:"
        IFS=$'\n'
        select SSID in $AVAILABLE_SSIDS; do
            if [ -n "$SSID" ]; then
                WIFI_SSID="$SSID"
                break
            else
                echo "Invalid selection. Please try again."
            fi
        done
        unset IFS

        echo "Selected Wi-Fi SSID: $WIFI_SSID"
    }

    # Function to update the nfs1.sh script
    update_nfs_script() {
        local wifi_ssid="$1"
        local remote_server="$2"
        local nfs_shares=("${!3}")
        local mount_points=("${!4}")
        local script_path="./service/nfs1.sh"

        if [ -z "$wifi_ssid" ] || [ -z "$remote_server" ]; then
            echo "Error: Wi-Fi SSID or remote server IP is null or empty." >&2
            return 1
        fi

        # Temporary file to store the new content
        local temp_script="${script_path}.tmp"

        # Read the existing content of the nfs1.sh script, excluding any previous variable definitions
        local existing_content=$(grep -vE '^WIFI_SSID=|^REMOTE_SERVER=|^REMOTESHARE_|^LOCALMOUNT_' "$script_path")

        # Write the new variables at the top of the temporary script
        {   echo "#!/bin/bash"
            echo "num_shares=\"$num_shares\""
            echo "WIFI_SSID=\"$wifi_ssid\""
            echo "REMOTE_SERVER=\"$remote_server\""
            for (( j=0; j<${#nfs_shares[@]}; j++ )); do
                echo "REMOTESHARE_$((j+1))=\"${nfs_shares[j]}\""
                echo "LOCALMOUNT_$((j+1))=\"${mount_points[j]}\""
            done
            # Append the rest of the original script
            echo "$existing_content"
        } > "$temp_script"

        mv "$temp_script" "$script_path"
    }

    # Main function to handle Wi-Fi NFS Shares setup
    wifi_nfs_shares() {
        echo "Enable Wi-Fi NFS Shares"
        clear # Clear the screen

        # Scan and select Wi-Fi
        scan_and_select_wifi

        # Prompt the user for the number of NFS shares to add
        read -p "How many NFS shares would you like to add? " num_shares
        read -p "Enter IP of Server (e.g., 10.0.0.10): " REMOTE_SERVER

        nfs_shares=()
        mount_points=()

        # Loop through the number of shares and prompt the user for each share
        for (( i=1; i<=num_shares; i++ )); do
            read -p "Enter the NFS share #$i (e.g., server:/path): " nfs_share
            read -p "Enter the mount point #$i (e.g., /mnt/nfs): " mount_point

            # Create the mount point directory if it doesn't exist
            if [ ! -d "${mount_point}" ]; then
                mkdir -p "${mount_point}"
                echo "Created mount point directory ${mount_point}"
            else
                echo "Mount point directory ${mount_point} already exists"
            fi

            nfs_shares+=("$nfs_share")
            mount_points+=("$mount_point")
        done

        # Update the nfs1.sh script with the new values
        update_nfs_script "$WIFI_SSID" "$REMOTE_SERVER" nfs_shares[@] mount_points[@]

        echo "All specified NFS shares have been added to the nfs1.sh script."

        # Message indicating that Wi-Fi shares will be active on the next reboot
        dialog --msgbox "Wi-Fi Shares Active on Next Reboot" 0 0

        sleep 2
        # Install Service
        cp ./service/nfs-start.service /etc/systemd/system/
        cp ./service/nfs1.sh /usr/bin/
        chmod +x /usr/bin/nfs1.sh
        systemctl enable nfs-start.service
        dialog --msgbox "Wifi Shares Active on Next Reboot" 0 0
    }

    # Call the main function
    wifi_nfs_shares
}

#Setup NFS shares via FSTAB
nfs_shares_via_fstab() {
    echo "NFS Shares Via FSTAB (Wired Only)"
     # Connect NFS Shares VIA FSTAB
            clear # clear screen
            echo "NFS Shares Via FSTAB ( WIRED ONLY )"
            add_to_fstab() {
                local nfs_share=$1
                local mount_point=$2
                local options="rw,sync,hard,intr,rsize=8192,wsize=8192,timeo=14"

                # Backup /etc/fstab before making changes (only once)
                if [ ! -f /etc/fstab.bak ]; then
                    cp /etc/fstab /etc/fstab.bak
                fi

                # Append the NFS entry to the end of /etc/fstab
                echo "${nfs_share} ${mount_point} nfs ${options} 0 0" >> /etc/fstab

                echo "Added ${nfs_share} to /etc/fstab"
            }

            # Prompt the user for the number of shares to add
            read -p "How many NFS shares would you like to add? " num_shares

            for (( i=1; i<=num_shares; i++ )); do
            # Prompt the user for the NFS share and mount point
            read -p "Enter the NFS share #$i (e.g., server:/path): " nfs_share
            read -p "Enter the mount point #$i (e.g., /mnt/nfs): " mount_point

            # Create the mount point directory if it doesn't exist
            if [ ! -d "${mount_point}" ]; then
                mkdir -p "${mount_point}"
                echo "Created mount point directory ${mount_point}"
            else
                echo "Mount point directory ${mount_point} already exists"
            fi

            # Add the NFS entry to /etc/fstab
            add_to_fstab "${nfs_share}" "${mount_point}"
            done

            # Mount all NFS shares
            mount -a

            echo "All specified NFS shares have been mounted."
}

# Main Function to Setup Shares
nfs_setup(){
  while true; do
        CHOICE=$(dialog --clear \
                --title "NFS Share Setup" \
                --nocancel \
                --menu "Choose an option:" \
                15 60 5 \
                1 "WIFI NFS Shares" \
                2 "NFS Shares Via FSTAB ( WIRED ONLY )" \
                B "Back" \
                3>&1 1>&2 2>&3)

        clear
        case $CHOICE in
            1) setup_wifi_nfs_shares ;;
            2) nfs_shares_via_fstab ;;
            B) break ;;
            *) echo "Invalid option. Please try again." ;;
        esac
    done
}


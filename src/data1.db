#!/bin/bash
#-------------------------------------------------------------------------------------#
# Fedora Post-Installation Script                                                     #
# This script automates the configuration and installation of various software        #
# components on a Fedora system. It includes functions for system updates,            #
# firmware checks, and installations of essential fonts and repositories.             #
#                                                                                     #
# Functions:                                                                          #
#   - fix_and_clean_dnf: Optimizes and updates DNF package manager settings.          #
#   - check_firmware_update: Checks and applies firmware updates.                     #
#   - install_rpm_fusion: Adds RPM Fusion repositories and installs related packages. #
#   - install_microsoft_core_fonts: Installs Microsoft core fonts.                    #
#   - install_nerd_fonts: Installs JetBrains Mono Nerd Font.                          #
#   - execsh: Sets executable permissions on shell scripts in the current directory.  #
#                                                                                     #
# Usage:                                                                              #
#   Run the script with root privileges to ensure it can perform system-level         #
#   modifications. For example, use 'sudo ./main.sh'.                                 #
#                                                                                     #
# Prerequisites:                                                                      #
#   - The script assumes a Fedora system with DNF and fwupdmgr installed.             #
#   - Internet connection is required for downloading packages and updates.           #
#-------------------------------------------------------------------------------------#


# does DNF upgrade and performs a dnf clean updates dnf conf
# adding fastestmirror , max downloads 10, default yes and countme no
fix_and_clean_dnf() {
# DNF Conf File path
dnf_conf="/etc/dnf/dnf.conf"

# Check if dnf.conf exists
if [ ! -f "$dnf_conf" ]; then
    echo "dnf.conf not found."
    exit 1
fi

# Check if the lines already exist, if not, add them
    grep -q '^fastestmirror=true$' "$dnf_conf" || echo 'fastestmirror=true' >> "$dnf_conf"
    grep -q '^max_parallel_downloads=10$' "$dnf_conf" || echo 'max_parallel_downloads=10' >> "$dnf_conf"
    grep -q '^countme=false$' "$dnf_conf" || echo 'countme=false' >> "$dnf_conf"
    grep -q '^defaultyes=True$' "$dnf_conf" || echo 'defaultyes=True' >> "$dnf_conf"

    echo "Checked and updated $DNF_CONF"
    sleep 2
    # Clean cache and upgrade DNF
    dnf clean all
    dnf upgrade -y
    clear
}

# This Function performs a firmware update and upgrade if needed
check_firmware_update() {
    echo "Checking for Firmware updates..."

    # Ensure fwupdmgr is available
    if ! command -v fwupdmgr >/dev/null 2>&1; then
        echo "fwupdmgr is not installed. Please install it first."
        exit 1
    fi

    # Refresh the firmware metadata
    fwupdmgr refresh --force

    # Get available updates
    fw_update_result=$(fwupdmgr get-updates)

    # Check if there are updates available
    if echo "$fw_update_result" | grep -q "No upgrades for"; then
        update_status="No firmware update available."
    elif echo "$fw_update_result" | grep -q "Upgrade available"; then
        # Perform the firmware update
        fwupdmgr update -y
        update_status="Firmware updated successfully."
    else
        update_status="No updates required."
    fi

    # Clear the screen and show the result in a dialog box
    clear
    dialog --msgbox "$update_status Press OK to continue." 0 0
}

# This Function Install RPM Fusion Repos
install_rpm_fusion() {
    echo "Install RPM Fusion"
    
    fedora_version=$(rpm -E %fedora)
    rpmfusion_free_url="https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-${fedora_version}.noarch.rpm"
    rpmfusion_nonfree_url="https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-${fedora_version}.noarch.rpm"

    dnf install -y --nogpgcheck "$rpmfusion_free_url" "$rpmfusion_nonfree_url"
    dnf install -y rpmfusion-free-appstream-data rpmfusion-nonfree-appstream-data 
    dnf install -y rpmfusion-free-release-tainted rpmfusion-nonfree-release-tainted
    clear
}

#Function Installs A nerd font called Jetbrains Mono
install_nerd_fonts() {
  # Variables
  URL="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/JetBrainsMono.zip"
  ZIP_FILE="JetBrainsMono.zip"
  EXTRACT_DIR="JetBrainsMono"
  FONT_DIR="/usr/share/fonts/$EXTRACT_DIR"
  LOG_FILE="install_nerd_fonts.log"

  # Logging function
  log() {
    echo "$(date +"%Y-%m-%d %T") - $1" | tee -a $LOG_FILE
  }

  # Start installation
  log "Starting installation of Nerd Fonts"

  # Download the ZIP file
  log "Downloading $URL"
  wget -O $ZIP_FILE $URL
  if [ $? -ne 0 ]; then
    log "Failed to download $URL"
    exit 1
  fi

  # Extract the ZIP file
  log "Extracting $ZIP_FILE"
  unzip $ZIP_FILE -d $EXTRACT_DIR
  if [ $? -ne 0 ]; then
    log "Failed to extract $ZIP_FILE"
    exit 1
  fi

  # Check if destination directory exists, if not, create it
  if [ ! -d "$FONT_DIR" ]; then
    log "Destination directory $FONT_DIR does not exist. Creating it."
    mkdir -p $FONT_DIR
    if [ $? -ne 0 ]; then
      log "Failed to create directory $FONT_DIR"
      exit 1
    fi
  fi

  # Copy the extracted files to the destination directory
  log "Copying extracted files to $FONT_DIR"
  cp -r $EXTRACT_DIR/* $FONT_DIR
  if [ $? -ne 0 ]; then
    log "Failed to copy extracted files to $FONT_DIR"
    exit 1
  fi

  # Change the ownership to root
  log "Changing ownership of $FONT_DIR to root"
  chown -R root: $FONT_DIR
  if [ $? -ne 0 ]; then
    log "Failed to change ownership of $FONT_DIR"
    exit 1
  fi

  # Change the permissions to 644 for files
  log "Changing permissions of files in $FONT_DIR to 644"
  find $FONT_DIR -type f -exec chmod 644 {} \;
  if [ $? -ne 0 ]; then
    log "Failed to change file permissions in $FONT_DIR"
    exit 1
  fi

  # Apply restorecon to the folder
  log "Applying restorecon to $FONT_DIR"
  restorecon -vFr $FONT_DIR
  if [ $? -ne 0 ]; then
    log "Failed to apply restorecon to $FONT_DIR"
    exit 1
  fi

  # Clean up
  log "Cleaning up"
  rm -rf $ZIP_FILE $EXTRACT_DIR
  if [ $? -ne 0 ]; then
    log "Failed to remove $ZIP_FILE or $EXTRACT_DIR"
    exit 1
  fi
    sleep 20
  log "Installation of Nerd Fonts completed successfully"
}

#This Function Installs Microsoft core Fonts
install_microsoft_core_fonts() {
  # Update and install necessary packages
  sudo dnf upgrade --refresh -y
  sudo dnf install curl cabextract xorg-x11-font-utils fontconfig -y
  # Install Microsoft Core Fonts
  
  sudo rpm -i https://downloads.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm
  echo "Installation of Microsoft Core Fonts completed successfully"
}

# This Function set all .sh files as executable
#not used anymore marked for deletion possible but leaving here for future use
execsh(){
    # Iterate over all .sh files in the current directory
    for file in *.sh; do
    if [ -f "$file" ]; then
        # Add executable permission
        chmod +x "$file"
    fi
    echo "files mark as execuctable"
done
}

# This Function installs Oh My Bash
function ohh_my_bash() {
  local USER2=$(logname)
    # Fetch script from URL with --unattended option
    script_url="https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh"
    script=$(curl -fsSL $script_url)

    # Execute the script with --unattended option
    echo "$script" | runuser -u "$USER2" -- bash -c "bash -s -- --unattended"
    dialog --msgbox "Oh My Bash installed. Please restart your terminal to apply changes." 0 0
}